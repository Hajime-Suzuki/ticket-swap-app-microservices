service:
  name: ${file(config.js):env.ticketServiceName}

provider:
  name: aws
  runtime: nodejs10.x
  region: ${file(config.js):env.region}
  environment: ${file(config.js):env}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - '#{ticketsTable.Arn}'
        - '#{eventTable.Arn}'
        - '#{userTable.Arn}'

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-offline
  - serverless-pseudo-parameters

custom:
  serverless-offline:
    port: ${file(config.js):env.ticketsPort}
  serverless-offline-sns:
    port: 9999
    sns-endpoint: http://localhost:${file(config.js):env.snsOfflinePort} # port should be accessible before running sls offline start.
    debug: true

  webpack:
    includeModules:
      forceExclude:
        - aws-sdk

  dynamodb:
    start:
      port: ${file(config.js):env.ticketsDbPort}
      migrate: true
    stages:
      - dev

functions:
  tickets:
    name: ${file(config.js):env.ticketsFunc}
    handler: src/index.handler
    events:
      - http: # this endpoint is test purpose for now
          method: any
          path: '/tickets'

  usersEventListener:
    name: ${self:service.name}-users-event-listener
    handler: src/handlers/users-event-listener.handler
    events:
      - sns:
          # serverless pseudo parameters plugin syntax doesn't work here.
          arn: 'arn:aws:sns:${file(config.js):env.region}:${file(config.js):env.AWS_ACCOUNT_ID}:${file(config.js):env.userSignUpEvent}'

resources:
  Resources:
    eventCreatedSQS:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: event-created-queue-test

    ticketsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(config.js):env.tickets_tickets_table}
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE

        BillingMode: PAY_PER_REQUEST

    eventTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(config.js):env.tickets_events_table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

        BillingMode: PAY_PER_REQUEST

    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(config.js):env.tickets_users_table}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH

        BillingMode: PAY_PER_REQUEST
