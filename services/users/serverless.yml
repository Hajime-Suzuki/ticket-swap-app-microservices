service:
  name: ${file(config.js):env.usersServiceName}

provider:
  name: aws
  runtime: nodejs10.x
  region: ${file(config.js):env.region}
  environment: ${file(config.js):env}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - { Fn::GetAtt: [usersTable, Arn] }
    - Effect: Allow
      Action:
        - sns:*
      Resource:
        - 'arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:*'

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-pseudo-parameters

custom:
  serverless-offline:
    port: ${file(config.js):env.usersPort}

  webpack:
    includeModules:
      forceExclude:
        - aws-sdk

  dynamodb:
    start:
      port: ${file(config.js):env.usersDbPort}
      migrate: true
      seed: true
    seed:
      dev:
        sources:
          - table: ${file(config.js):env.users_users_table}
            sources: ['./.seeds/users.json']
    stages:
      - dev

functions:
  main:
    name: ${file(config.js):env.usersFunc}
    handler: src/index.handler
    events:
      - http:
          method: any
          path: '/users'

  preSignUp:
    name: ${self:service.name}-pre-signup
    handler: src/pre-signup.handler
    events:
      - cognitoUserPool:
          pool: TicketSwapUserPool
          trigger: PreSignUp

resources:
  Resources:
    CognitoUserPoolTicketSwapUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service.name}-user-pool
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Required: true

          - Name: preferred_username
            AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Required: true

          - Name: id
            AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: false
            Required: false

        Policies:
          PasswordPolicy:
            MinimumLength: 6

    userClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service.name}-user-client
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPoolTicketSwapUserPool }

    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(config.js):env.users_users_table}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH

        BillingMode: PAY_PER_REQUEST
